package org.sudu.experiments.editor;

import org.sudu.experiments.*;
import org.sudu.experiments.editor.ui.colors.DialogItemColors;
import org.sudu.experiments.editor.ui.colors.Themes;
import org.sudu.experiments.editor.worker.FsWorkerJobs;
import org.sudu.experiments.math.ArrayOp;
import org.sudu.experiments.math.V2i;
import org.sudu.experiments.ui.ToolbarItem;

import java.util.Arrays;

public class SelectFileTest extends WindowScene {
  static final String testGen = "org.sudu.experiments.FileTestGen";
  static final int pageIndex = 4080;

  static final int[] pageHash = {
      0xd3f6ea0d, 0x39eedef, 0x88e7738a, 0x6cf7ac8e, 0xcb126086, 0x387eb9c9, 0x88cf2fdf, 0xd6354322,
      0x88c26011, 0x8fdaa415, 0x2034becc, 0x114eec16, 0x21be342b, 0x94287c6d, 0x309bc89a, 0xe062108f,
      0xe5f75fdd
};

  static final String readPageText = "read file in pages";
  static final String openFolderT = "open folder ...";
  static final String openFileT = "open file ...";

  DialogItemColors theme = Themes.darkColorScheme();

  int passCnt;
  int failCnt;

  byte[] b16k = new byte[16 * 1024];
  int[] resultH = new int[pageHash.length];
  int[] resultL = new int[pageHash.length];

  public SelectFileTest(SceneApi api) {
    super(api);
    api.input.onContextMenu.add(e -> showPopup(e.position));
    uiContext.dprListeners.add(this::onDprChanged);
  }

  private void onDprChanged(float oldDpr, float newDpr) {
    if (oldDpr == 0) {
      var w = windowManager.uiContext.windowSize;
      showPopup(new V2i(w.x / 3, w.y / 3));
    }
  }

  private boolean showPopup(V2i position) {
    windowManager.showPopup(
        theme, theme.windowTitleFont, position,
        ArrayOp.supplier(
            new ToolbarItem(this::openFolder, openFolderT),
            new ToolbarItem(this::openFile, openFileT),
            new ToolbarItem(this::openForPages, readPageText))
    );
    return true;
  }

  void openForPages() {
    System.out.println("pageIndex = " + pageIndex);
    System.out.println("point to the file generated by " + testGen);

    api.window.showOpenFilePicker(this::readLargeFilePages);
  }

  private void readLargeFilePages(FileHandle file) {
    Debug.consoleInfo("readLargeFilePages -> " + file);
    for (int i = 0; i < pageHash.length; i++) {
      int pageI = pageIndex + i, index = i;
      int start = pageI * b16k.length;
      FsWorkerJobs.readBinFile(
          api.window.worker(), file, start, b16k.length,
          bytes -> {
            int hashCode = Arrays.hashCode(bytes);
            resultH[index] = hashCode;
            resultL[index] = bytes.length;
            if (pageHash[pageI - pageIndex] == hashCode) {
              passCnt++;
            } else {
              failCnt++;
            }
            if (passCnt + failCnt == pageHash.length) {
              for (int j = 0; j < resultH.length; j++) {
                System.out.println("[" + (pageIndex + j)
                    + "]: hash = 0x" + Integer.toHexString(resultH[j])
                    + ", l = " + resultL[j]);
              }
              if (failCnt == 0) {
                System.out.println("hash test passed");
              } else {
                System.out.println("passCnt = " + passCnt);
                System.out.println("failCnt = " + failCnt);
              }
            }
          }, System.err::println
      );
    }

    // read after end of file
    readAfterEndOfFile(file);
  }

  private void readAfterEndOfFile(FileHandle file) {
    FsWorkerJobs.asyncStats(api.window.worker(), file,
        s -> readAfterEndOfFile(file, s.size),
        System.err::println);
  }

  private void readAfterEndOfFile(FileHandle file, double pos) {
    FsWorkerJobs.readBinFile(
        api.window.worker(), file, pos, b16k.length,
        b -> System.err.println("unexpected bytes length: " + b.length),
        error -> {
          System.out.println("SelectFileTest.readAfterEndOfFile: " + error);
          if (FileHandle.eof(error))
            System.out.println(FileHandle.eof + " test passed");
          else
            System.err.println(error);
        }
    );
  }


  void takeDirectory(DirectoryHandle dir) {
    Debug.consoleInfo("dir: " + dir);
    dir.read(new DirectoryHandle.Reader() {
      int d;
      @Override
      public void onDirectory(DirectoryHandle dir) {
        Debug.consoleInfo("  sub dir: " + dir);
        d++;
        dir.read(this);
      }

      @Override
      public void onFile(FileHandle file) {
        Debug.consoleInfo("  file: " + file);
      }

      @Override
      public void onComplete() {
        if (--d == 0) System.out.println("complete");
      }
    });
  }

  void takeFile(FileHandle file) {
    Debug.consoleInfo("showOpenFilePicker -> " + file);
    FsWorkerJobs.readBinFile(
        api.window.worker(), file, 0, -1,
        bytes -> openFile(file, bytes), this::onError);
  }

  void onError(String error) {
    Debug.consoleInfo(error);
  }

  void openFile(FileHandle file, byte[] content) {
    System.out.println("file = " + file);
    System.out.println("file.content.length = " + content.length);
  }

  private void openFile() {
    api.window.showOpenFilePicker(this::takeFile);
  }

  private void openFolder() {
    api.window.showDirectoryPicker(this::takeDirectory);
  }
}
